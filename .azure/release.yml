# JPype CI pipeline
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  branches:
    include:
    - master
    - releases/*
  paths:
    include:
    - doc/*
    - setup.py
    - setupext/*
    - jpype/*
    - native/*
    - test/*

jobs:
- job: Documentation
  pool:
    vmImage: "ubuntu-16.04"
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - script: |
      pip install  --exists-action=w --no-cache-dir -r test-requirements.txt -r doc/doc-requirements.txt
    displayName: 'Install requirements'
  - script: |
      python -m sphinx -T -b readthedocs -W -d _build/doctrees-readthedocs -D language=en doc build/html
    displayName: 'Check documentation'
  - task: CopyFiles@2
    inputs:
      contents: 'build/html/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: documentation

- job: Coverage
  pool:
    vmImage: "ubuntu-16.04"
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - script: |
      echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
    displayName: "Set JDK 11"
  - script: mvn -q -f project/coverage package
  - script: |
      python setup.py test_java
      pip install gcovr pytest-cov jedi
      pip install -r test-requirements.txt
      pip install numpy typing_extensions
    displayName: 'Install requirements'
  - script: |
      python setup.py --enable-coverage --enable-build-jar build_ext --inplace
    displayName: 'Build'
  - script: |
      python -m pytest -v test/jpypetest --cov=jpype --cov-report=xml:coverage_py.xml --classpath="build/classes" --jacoco --checkjni
    displayName: 'Test'
  - script: |
      gcovr -r . --xml -o coverage.xml --exclude-unreachable-branches --exclude-throw-branches
      java -jar project/coverage/org.jacoco.cli-0.8.5-nodeps.jar report build/coverage/jacoco.exec --classfiles build/classes/ --xml coverage_java.xml --sourcefiles native/java
      bash <(curl -s https://codecov.io/bash) -f coverage.xml -f coverage_py.xml -f coverage_java.xml -X gcov
    displayName: 'Report'
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: coverage_java.xml
      pathToSources: native/java
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: coverage.xml
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: coverage_py.xml

- job: Tracing
  pool:
    vmImage: "ubuntu-16.04"
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - script: |
      python setup.py --enable-tracing --enable-build-jar build_ext --inplace
    displayName: 'Build'

- job: Test_Linux
  strategy:
    matrix:
      linux-3.5:
        imageName: "ubuntu-16.04"
        python.version: '3.5'
      linux-3.6:
        imageName: "ubuntu-16.04"
        python.version: '3.6'
      linux-3.7:
        imageName: "ubuntu-16.04"
        python.version: '3.7'
      linux-3.8:
        imageName: "ubuntu-16.04"
        python.version: '3.8'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - script: |
      echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
    displayName: "Set JDK 11"
  - script: |
      python setup.py sdist
      pip install dist/*
    displayName: 'Build module'
  - script: |
      pip install numpy jedi typing_extensions
      python -c "import jpype"
    displayName: 'Check module'
  - script: |
      python setup.py test_java
      pip install -r test-requirements.txt
    displayName: 'Install test'
  - script: |
      python -m pytest -v --junit-xml=build/test/test.xml test/jpypetest --checkjni  
    displayName: 'Test JDK 11'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
       testResultsFiles: 'build/test/test.xml'
       testRunTitle: 'Publish linux test results for Python $(python.version) with JDK 11'

  - script: |
      echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
    displayName: "Set JDK 8"
  - script: |
      python -m pytest -v --junit-xml=build/test/test.xml test/jpypetest --checkjni  
    displayName: 'Test JDK 8'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
       testResultsFiles: 'build/test/test.xml'
       testRunTitle: 'Publish linux test results for Python $(python.version) with JDK 8'

- job: Test_OSX
  strategy:
    matrix:
      mac-3.8:
        imageName: "macos-10.14"
        jdk_version: "1.11"
        python.version: '3.8'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - script: |
      python setup.py sdist
      pip install dist/*
    displayName: 'Build module'
  - script: python -c "import jpype"
    displayName: 'Check module'
  - script: |
      python setup.py test_java
      pip install -r test-requirements.txt
      pip install numpy jedi
      python -m pytest -v --junit-xml=build/test/test.xml test/jpypetest --checkjni  
    displayName: 'Test module'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test/test.xml'
      testRunTitle: 'Publish osx test results for Python $(python.version)'

- job: Test_Windows
  strategy:
    matrix:
      windows-3.5:
        imageName: "vs2017-win2016"
        jdk_version: "1.11"
        python.version: '3.5'
      windows-3.6:
        imageName: "vs2017-win2016"
        jdk_version: "1.11"
        python.version: '3.6'
      windows-3.7:
        imageName: "vs2017-win2016"
        jdk_version: "1.11"
        python.version: '3.7'
      windows-3.8:
        imageName: "vs2017-win2016"
        jdk_version: "1.11"
        python.version: '3.8'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - script: |
      python setup.py build_ext --inplace
    displayName: 'Build module'
  - script: |
      pip install numpy jedi typing_extensions
      python -c "import jpype"
    displayName: 'Check module'
  - script: |
      python setup.py test_java
      pip install -r test-requirements.txt
      python -m pytest -v --junit-xml=build/test/test.xml test/jpypetest --checkjni  
    displayName: 'Test module'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'build/test/test.xml'
      testRunTitle: 'Publish windows test results for Python $(python.version)'

- job: Test_debug
  condition: eq(1,2)
  strategy:
    matrix:
      linux-3.8:
        imageName: "ubuntu-16.04"
        jdk_version: "1.11"
        python.version: '3.8'
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - script: |
      sudo apt install gdb
      python setup.py sdist
      pip install dist/*
    displayName: 'Build module'
  - script: python -c "import jpype"
    displayName: 'Check module'
  - script: |
      python setup.py test_java
      pip install -r test-requirements.txt
      pip install numpy jedi
      gdb -ex 'handle SIGSEGV nostop noprint pass' -ex "run -m pytest -v test/jpypetest/test_jstring.py --checkjni"  -ex "bt" -ex "quit" python
    displayName: 'Debug module'


